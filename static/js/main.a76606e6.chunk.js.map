{"version":3,"sources":["../../../tic-tac-toe/src/logo.svg","../../../tic-tac-toe/src/components/Square.js","../../../tic-tac-toe/src/components/Board.js","../../../tic-tac-toe/src/components/Game.js","../../../tic-tac-toe/src/App.js","../../../tic-tac-toe/src/serviceWorker.js","../../../tic-tac-toe/src/index.js"],"names":["module","exports","__webpack_require__","p","Square","props","react_default","a","createElement","className","onClick","value","Board","renderSquare","i","_this","squares","this","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","Game","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","history","state","slice","stepNumber","xIsNext","setState","concat","Array","fill","step","status","_this2","current","winner","moves","map","move","desc","key","jumpTo","components_Board","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a76606e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nexport default function Square(props) {\r\n    return(\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n\r\n        </button>\r\n    )\r\n\r\n}","import React, {Component} from 'react';\r\nimport Square from './Square';\r\n\r\n\r\n class Board extends Component {\r\n    renderSquare = (i) => {\r\n        return <Square value = {this.props.squares[i]}\r\n                       onClick = {() => this.props.onClick(i)} />\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"border-row\" >\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"border-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React, {Component} from 'react';\r\nimport Board from \"./Board\";\r\n\r\nclass Game extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n            history: [\r\n                {squares:Array(9).fill(null)}\r\n            ]\r\n        }\r\n    }\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber:step,\r\n            xIsNext: (step%2)===0\r\n        })\r\n    }\r\n    handleClick = (i) => {\r\n        const history = this.state.history.slice(0,this.state.stepNumber+1);\r\n        const current = history[history.length-1];\r\n        const squares = current.squares.slice();\r\n        const winner = calculateWinner(squares);\r\n        if(winner || squares[i]){\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext?'X':'O';\r\n        this.setState({\r\n            history:history.concat({\r\n                squares: squares\r\n            }),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length\r\n        })\r\n    };\r\n    render() {\r\n\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        const moves = history.map((step,move) =>{\r\n            const desc = move? 'Go to #' +move :'Start the Game';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={()=>{this.jumpTo(move)}}>\r\n                        {desc}\r\n                    </button>\r\n                    </li>\r\n            )\r\n        });\r\n        let status;\r\n        if (winner){\r\n            status = 'Winner is ' + winner;\r\n        }\r\n        else {\r\n            status = 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                <Board onClick ={(i)=>this.handleClick(i)}\r\n                       squares = {current.squares}/>\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ul>{moves}</ul>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nfunction  calculateWinner(squares) {\r\n    const lines = [\r\n        [0,1,2],\r\n        [3,4,5],\r\n        [6,7,8],\r\n        [0,3,6],\r\n        [1,4,7],\r\n        [2,5,8],\r\n        [0,4,8],\r\n        [2,4,6]\r\n    ];\r\nfor (let i=0; i<lines.length;i++){\r\n    const [a,b,c] = lines[i];\r\n    if(squares[a] && squares[a]===squares[b]&& squares[b]===squares[c]){\r\n        return squares[a];\r\n    }\r\n}\r\n\r\n    return null;\r\n}\r\n\r\n\r\nexport default Game;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return (\n    <Game/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}